#Active Record

1.Active Record是MVC中的M，处理数据和业务逻辑，负责创建和使用需要持久存入数据库中的数据。是一种对象关系映射(ORM)系统
 1.1ORM把程序中的对象和关系型数据库中的数据表连接起来,程序中对象的属性和对象间的关系可以通过一种简单的方法从数据库获取,无需编写SQL语句,也不过度依赖特定的数据库种类
 1.2Active Record用作ORM框架提供的功能
  1).表示Model和其中的数据
  2).表示Model间的关系
  3).通过相关联的Model表示继承关系
  4).持久存入数据库前,验证Model
  5).以面向对象的方式处理数据库操作

2.Active Record中"多约定少配置"原则
 2.1命名约定：查找Model与数据表的映射关系，Rails把Model类名转换为复数（Article->articles），然后查找对应的数据表
 2.2模式约定：对数据表中的字段命名约定
	1).外键：使用singularized_table_name_id命名，创建模型关联后（Comment），Active Record会查找这个字段（article_id）
	2).主键：数据迁移时会字段创建使用整数字段id作为表的主键
	3).created_at：创建记录时，自动设为当前时间戳
	4).updated_at：更新记录时，自动设为当前时间戳
	5).lock_version：在模型中添加乐观锁定功能
	6).type：让模型使用单表继承
	7).(association_name)_type：多态关联的类型
	8).(table_name)_count：缓存关联对象的数量

3.CRUD:读写数据
 3.1创建：new/create方法会实例化一个对象，create方法直接将该对象对应的记录存入数据库，new方法需要额外调用save方法
 3.2读取：article=Article.all/first/find_by(id:1)/where(title:'xxx').order('created_at DESC')....
 3.3更新：article=Article.find_by(title:'xxx') article.title='xx' article.save
		  article=Article.find_by(title:'xxx') article.update(title:'xx')
		  Article.update_all "title=xx" #批量更新
 3.4删除：article=Article.find_by(title:'xxx') article.destroy

4.数据验证：数据存入数据库前验证对象的状态
	validates :title,presence:true  ...可以检查属性值是否为空/唯一/数据库中是否存在，调用create、save、update时验证失败会返回false
	*在模型中做验证是最有保障的，只有通过验证的数据才存入数据库
	1).valid?方法会触发数据验证，如果对象上没有错误，就返回true，否则返回false。invalid?相反
	2).Active Record验证结束后，所有发现的错误都可以通过实例方法errors.messages获取，该方法返回一个错误集合。

5.回调

###################################################################################################
6.数据库迁移：按照时间顺序修改数据库的模式，rake之后数据表才会创建。回滚迁移，数据表会被删除
 6.1创建迁移
  6.1.1单独创建迁移 迁移名称是AddXxxToYyy或者RemoveXxxFromYyy格式，而且后面跟着字段和类型列表，迁移中会在yyys表中生成合适的add_column或remove_column语句
   rails generate migration CreateArticles 创建一个空的迁移(title:string创建一个有title字段的数据表articles)
   rails generate migration AddPartNumberToArticles part_number:string:index 在Articles表中创建一个新的字段part_number
   rails generate migration RemovePartNumberFromArticles part_number:string 移除articles表中part_number字段
  6.1.2模型生成器 rails generate model Article title:string text:text
  6.1.3支持的类型修饰符（在字段类型后面，可以在{}中添加的选项）
   1).limit：设置string/text/binary/integer类型字段的最大值
   2).precision：设置decimal类型字段的精度，即数字的位数
   3).scale：设置decimal类型字段小数点后的数字位数
   4).polymorphic：为belongs_to关联添加type字段
   5).null：是否允许该字段的值为null
   *price:decimal{5,2}生成的迁移是:decimal, precision: 5, scale: 2
 6.2编写迁移
  6.2.1创建数据表
   create_table方法会默认创建名为id的主键，通过:primary_key可以修改主键名，不想生成主键可以传入id:false，数字数据库的选项，可以在:options选择中使用SQL。options:"ENGINE=BLACKHOLE"会在创建数据表的SQL语句后面加上ENGINE=BLACKHOLE。（MySQL默认的选项是 ENGINE=InnoDB）
   create_table :articles do |t|
  		t.string :title,null:false #创建title字段,类型修饰符null不允许字段值为null
   end
  6.2.2创建联合数据表
  create_join_table :artices,:comments 会创建一个artices_comments的数据表，包含2个字段artice_id和comment_id,:null选项默认是false
  create_join_table :artices,:comments,table_name: :xxxxxx,column_options:{null:true} 指定数据库名称为xxxxxx，字段值可以为null
  create_join_table :artices, :comments do |t|
  		t.index :artice_id
  		t.index :comment_id
  end
  6.2.3修改数据表
  change_table修改现有的数据表
  change_table :articles do |t|
  		t.remove :title		#移除title字段
  		t.string :part_number	#创建part_number字段
  		t.index :part_number	#并建立索引
  		t.rename :text, :content #重命名text字段
  end
  6.2.4使用execute方法执行任意的sql语句
  Article.connection.execute('UPDATE `articles` SET `price`=`free` WHERE 1')
  6.2.5使用change方法
  change方法是最常用的方法，可以完成大多数指定的操作，在change方法中只能使用下面的方法，
  	add_column、add_index、add_reference、add_timestamps、create_table、create_join_table、drop_table（必须提供代码块）、drop_join_table（必须提供代码块）、remove_timestamps、rename_column、rename_index、remove_reference、rename_table
  6.2.6使用reversible方法指定运行和撤销复杂的迁移操作
  	确保操作是按顺序执行的
  6.2.7使用up和down方法
  	up方法定义要对数据库模式做哪些操作
  	down方法用于撤销这些操作
  	*撤销时最好按照添加的相反顺序进行
  6.2.8撤销之前的迁移
  	revert方法还可以接收一个块，定义撤销操作，可以撤销以前迁移的部分操作
  6.3运行迁移：rake db:migrate (VERSION=xxxx)，执行(xxxx时间戳之前)迁移中的change或up方法
   6.3.1回滚
   	rake db:rollback (STEP=3)/rake db:migrate:redo (STEP=3) 回滚前1次(前3次)的迁移，撤销change中操作或执行down方法。
   6.3.2搭建数据库
   	rake db:setup 创建数据库，加载模式，并填充种子数据
   6.3.3重建数据库
   	rake db:reset/rake db:drop db:setup 删除数据库然后重建
   6.3.4运行指定的迁移
   	rake db:migrate:up(down) VERSION=xxxx
   6.3.5在不同环境中运行迁移
   	rake db:migrate RAILS_ENV=xxx
   6.3.6修改运行迁移时的输出
   	rake db:migrate VERBOSE=boolean 是否输出迁移时的日志
   	suppress_messages 接受一个代码块，禁止代码块中所有操作的输出
   	say 接受一个消息字符串作为参数，将其输出。第二个参数是布尔值，指定输出结果是否缩进
   	say_with_time 输出文本，以及执行代码块中操作所用时间。如果代码块的返回结果是整数，会当做操作的记录数量
  6.4修改现有的迁移
  	必须先回滚迁移rake db:rollback，编辑迁移文件后rake db:migrate执行改正后的版本。
  6.5导出模式
   6.5.1模式文件的使用：即db/schema.rb文件，可用来快速查看 Active Record 中有哪些属性
   6.5.2导出的模式文件类型
   	config/application.rb 文件中的 config.active_record.schema_format 选项设置，可以是 :sql 或 :ruby
   6.5.3模式导出和版本控制
   	rake db:structure:dump导出sql格式的数据库结构，无数据
   	*导出的模式文件是数据库模式的可信源，强烈推荐将其纳入版本控制。
  6.6迁移和种子数据
  	Rails提供了“种子”功能，可以把初始化数据存入数据库。在db/seeds.rb文件中写一些Ruby代码，然后执行rake db:seed命令即可
###################################################################################################